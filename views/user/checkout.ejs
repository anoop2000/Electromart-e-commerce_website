



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>


<%- include("../../views/partials/user/header") %>


<style>
    .page-header {
  padding: 30px 0;
  color: white;
  text-align: center;
  background-size: cover;
  background-position: center;
}

.breadcrumb-nav {
  margin: 20px 0;
}

.checkout {
  margin: 20px 0;
}

.checkout-discount {
  margin-bottom: 20px;
}

.square-btn {
  width: 150px;
  height: 40px;
  border-radius: 10px;
  padding: 0;
}

.panel-group {
  margin-top: 20px;
}

.panel-heading button {
  background-color: #041d39;
  color: white;
  border-radius: 5px;
  padding: 8px 16px;
  border: none;
  border: 1px solid #041d39;
}

.panel-heading button:hover {
  background-color: white;
  color: #041d39;
}

.summary {
  background-color: #f7f7f7;
  padding: 20px;
  border: 1px solid #ddd;
  margin-bottom: 50px;
  margin-top: 50px;
}

.summary-title {
  font-size: 1.5rem;
  margin-bottom: 20px;
}

.table-summary {
  width: 100%;
  margin-bottom: 20px;
}

.btn-outline-primary-2 {
  

  background-color: #041d39;
  color: white;
}

.btn-outline-primary-2:hover {
  

  background-color: transparent;
  border: 1px solid #041d39;
  color: #041d39;

}

/*-----------------------Breadcrimb section-------------------------------*/
.breadcrumb {
  font-size: 16px;
  margin: 20px 20px;
  font-family: 'HelveticaNeue-Light', 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, sans-serif;
  width:780px;
}

.breadcrumb-item {
  text-decoration: none;
  color: #17a2b8; 
  transition: color 0.3s ease;
}

.breadcrumb-item:hover {
  color: red; 
}

.breadcrumb-divider {
  margin: 0 5px;
  color: #6c757d;
}

.breadcrumb-item.current {
  color: #6c757d;
  font-weight: bold;
}


#text  :hover{
    color : red;
}


.button-container {
  display: flex;
  gap: 10px; 
}

.button-container .checkout {
  margin: 0; 
}

#shop{
  color : #fff;

}
#shop:hover{
  color: red;
}

img {
    max-width: 50%;
}

#updateId{
    color : white;
}
#updateId :hover{
    color: red;
}


/*   ----------------*/

/* Address Section */


/* Adjust Parent Row for Layout */
.row {
  display: flex;
  flex-wrap: wrap; /* Allows wrapping if needed on smaller screens */
  justify-content: space-between; /* Spaces out elements horizontally */
}

/* Left Column (Main Content) */
.col-lg-10 {
  flex: 0 1 72%; /* Occupies 72% of the row width */
}

/* Right Column (Address Section) */
.col-lg-2 {
  flex: 0 1 28%; /* Occupies 28% of the row width */
  display: flex;
  flex-direction: column; /* Ensures children stack vertically */
  align-items: flex-end; /* Aligns content to the right */
  margin-top: 180px;

}

.btn-order {
  margin-bottom: 200px; /* Adds a 200px gap below the button */
  margin-top: 50px;
}


/* modal layout*/

.address-dropdown {
  margin-top: 20px;
}

.list-group-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-body .form-group {
  margin-bottom: 15px;
}

.btn-sm {
  margin-left: 5px;
}

#addAddressLabel{
    width : 200px;
}

.breadcrumb {
  font-size: 14px;
  margin: 20px 20px;  /* Add margin from both ends */
  font-family: 'Roboto', sans-serif;
  width: calc(100% - 40px);  /* Full width minus margins */
  max-width: none;  /* Remove max-width restriction */
  padding: 10px 20px;
  background-color:#d2dee9;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.breadcrumb-item {
  text-decoration: none;
  color: #007bff; 
  transition: color 0.3s ease;
}

.breadcrumb-item:hover {
  color: red; 
}

.breadcrumb-divider {
  margin: 0 5px;
  color: #6c757d;
}

.breadcrumb-item.current {
  color: #6c757d;
  font-weight: bold;
}

/* Button styling */
.confirm-btn {
  display: block;
  width: 100%;
  padding: 12px 20px;
  margin-top: 20px;
  font-size: 16px;
  color: #fff;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.confirm-btn:hover {
  background-color: #0056b3;
}

#discountAmount{
  color : red;
  
}

#grandTotalAfterDiscount{
  color: green;
}




</style>


<main class="main">
    <div class="container">
      
  
      <div class="breadcrumb">
        <a href="/" class="breadcrumb-item">Home</a>
        <span class="breadcrumb-divider">> </span>
        <a href="/shop" class="breadcrumb-item">Shop</a>
        <span class="breadcrumb-divider">> </span>
        <a href="/getCart" class="breadcrumb-item">Cart</a>
        <span class="breadcrumb-divider">> </span>
        <span class="breadcrumb-item current">Checkout</span>


      </div>


      <div class="page-header text-center text-truncate">
        <h1 class="page-title">Checkout</h1>
      </div>
      <!-- End .breadcrumb-nav -->
  
      <div class="row">
        <div class="col-lg-10">
          <div class="checkout">
            <!-- Coupon Section -->
            <div class="checkout-discount">
              <form action="#" id="couponApplyForm" class="d-flex">
                <input type="text" class="form-control flex-grow-1 mr-2" name="couponCode" required id="appendedInputButton">
                <button class="btn btn-primary square-btn" type="submit">Apply Coupon</button>
              </form>
              <label for="checkout-discount-input" class="text-truncate mt-2">
                Have a coupon?<span>Click the Apply button</span>
              </label>
              
            </div>
            <button type="button" class="btn btn-sm btn-outline-danger" id="removeCouponBtn" onclick="window.location.reload()">
              Remove Coupon
            </button>
            <hr>



            <!-- Order Summary Section -->
            <aside class="col-lg-8">
                <div class="summary">
                  <h3 class="summary-title">Your Order</h3>
                  <table class="table table-summary">
                    <thead>
                      <tr>
                        <th>Image</th>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% cartData.items.forEach(function(item, index) { %>
                        <tr>
                            <td class="product-image">
                                <a href="/product-details?id=<%= item.productId._id %>">
                                    <img src="/uploads/re-image/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>">
                                </a>
                            </td>
            
                          <td>
                            
                              <%= item.productId.productName %>
                            
                          </td>
                          <td><%= item.quantity %></td>
                          <td id="productPrice<%= index %>" class="price-col">₹<%= item.totalPrice %></td>
                        </tr>
                      <% }); %>
              
                      <tr class="summary-subtotal">
                        <td colspan="2">Subtotal:</td>
                        <td></td>
                        <td>₹<span id="subtotal"><%= grandTotal %></span></td>
                      </tr>
              
                      <tr>
                        <td colspan="2">Shipping:</td>
                        <td></td>
                        <td>Free shipping</td>
                      </tr>

                    
              
                      <tr class="summary-total">
                        <td colspan="2">Total:</td>
                        <td></td>
                        <td>₹<span id="grandTotal"><%= finalAmount %></span></td>
                      </tr>

                      

                      <tr id="couponAppliedRow" style="display: none;">
                        <td>Coupon Applied:</td>
                        <td></td>
                        <td></td>
                        <td id="appliedCoupon"></td>
                      </tr>

                      <!-- Discount Row, initially hidden -->
                      <tr id="discountRow" style="display: none;">
                        <td>Discount:</td>
                        <td></td>
                        <td></td>
                        <td id="discountAmount"> </td>
                      </tr>

                      <!-- New Total After Discount Row, initially hidden -->
                      <tr id="newTotalRow" style="display: none;">
                        <td>Total After Discount:</td>
                        <td></td>
                        <td></td>
                        <td id="grandTotalAfterDiscount"></td>
                      </tr>


                    </tbody>
                  </table>
                </div>
              </aside>
              
            </div>
        </div>


            <!--body end -->
  
            <!-- Address Section -->
             <div class="col-lg-2">
                <form action="/confirm-address" method="POST">
                <div class="address-dropdown">
                    <h4 class="address-title">Select Your Address</h4>
                    
                    <ul class="list-group" style="width: 400px;">
                      <% addressData.forEach((address) => { %>
                        <li class="list-group-item">
                          <div class="d-flex justify-content-between align-items-center">
                            <div class="form-check">
                              <!-- Radio Button for Selecting Address -->
                              <input
                                type="radio"
                                class="form-check-input"
                                id="selectAddress<%= address._id %>"
                                name="selectedAddress"
                                value="<%= address._id %>"
                                required
                              />
                              <label class="form-check-label" for="selectAddress<%= address._id %>">
                                <strong><%= address.addressType %></strong> - <%= address.city %>, <%= address.state %>
                              </label>
                            </div>
                            <div>
                              <!-- Edit Button -->
                              <button
                                class="btn btn-sm btn-outline-primary"
                                data-bs-toggle="modal"
                                data-bs-target="#editAddressModal<%= address._id %>"
                              ><a href="/checkout/editAddress?id=<%=address._id%>"></a>
                              Edit
                              </button>
                  
                              <!-- Delete Button -->
                              <button
                                class="btn btn-sm btn-outline-danger"
                                data-bs-toggle="modal"
                                data-bs-target="#deleteAddressModal<%= address._id %>"
                              >
                                Delete
                              </button>
                            </div>
                          </div>
                        </li>

                        
                  
                        <!-- Edit Modal -->
                        <div
                          class="modal fade"
                          id="editAddressModal<%= address._id %>"
                          tabindex="-1"
                          aria-labelledby="editModalLabel"
                          aria-hidden="true"
                        >
                          <div class="modal-dialog">
                            <div class="modal-content">
                              <form action="/checkout/editAddress?id=<%= address._id %>" method="POST">
                                <div class="modal-header">
                                  <h5 class="modal-title" id="editModalLabel">Edit Address</h5>
                                  <button
                                    type="button"
                                    class="btn-close"
                                    data-bs-dismiss="modal"
                                    aria-label="Close"
                                  ></button>
                                </div>
                                <div class="modal-body">
                                  <!-- Updated Fields -->
                                  <div class="form-group">
                                    <label for="name">Address Type:</label>
                                    <input
                                      type="text"
                                      name="addressType"
                                      class="form-control"
                                      value="<%= address.addressType %>"
                                      required
                                    />
                                  </div>
                                  <div class="form-group">
                                    <label for="name">Name:</label>
                                    <input
                                      type="text"
                                      name="name"
                                      class="form-control"
                                      value="<%= address.name %>"
                                      required
                                    />
                                  </div>

                                  <div class="form-group">
                                    <label for="city">City:</label>
                                        <input
                                        type="text"
                                        name="city"
                                        class="form-control"
                                        value="<%= address.city %>"
                                        required
                                        />
                                  </div>

                                  <div class="form-group">
                                    <label for="street">Landmark:</label>
                                    <input
                                      type="text"
                                      name="landMark"
                                      class="form-control"
                                      value="<%= address.landMark %>"
                                      required
                                    />
                                  </div>
                                  <div class="form-group">
                                    <label for="state">State:</label>
                                    <input
                                      type="text"
                                      name="state"
                                      class="form-control"
                                      value="<%= address.state %>"
                                      required
                                    />
                                  </div>

                                  <div class="form-group">
                                    <label for="pinCode">PinCode:</label>
                                    <input
                                      type="text"
                                      name="pinCode"
                                      class="form-control"
                                      value="<%= address.pincode %>"
                                      required
                                    />
                                  </div>

                                  
                                  <div class="form-group">
                                    <label for="phoneNumber">Phone Number:</label>
                                    <input
                                      type="text"
                                      name="phoneNumber"
                                      class="form-control"
                                      value="<%= address.phone %>"
                                      required
                                    />
                                  </div>

                                  <div class="form-group">
                                    <label for="country">Alternate Phone:</label>
                                    <input
                                      type="text"
                                      name="altPhone"
                                      class="form-control"
                                      value="<%= address.altPhone %>"
                                      required
                                    />
                                  </div>

                                </div>
                                <div class="modal-footer">
                                  <button
                                    type="button"
                                    class="btn btn-secondary"
                                    data-bs-dismiss="modal"
                                  >
                                    Cancel
                                  </button>
                                  <button type="submit" class="btn btn-primary" id="updateId">Update</button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                  
                        <!-- Delete Modal -->
                        <div
                          class="modal fade"
                          id="deleteAddressModal<%= address._id %>"
                          tabindex="-1"
                          aria-labelledby="deleteModalLabel"
                          aria-hidden="true"
                        >
                          <div class="modal-dialog">
                            <div class="modal-content">
                              <form action="/checkout/deleteAddress?id=<%= address._id %>" method="POST">
                                <div class="modal-header">
                                  <h5 class="modal-title" id="deleteModalLabel">Delete Address</h5>
                                  <button
                                    type="button"
                                    class="btn-close"
                                    data-bs-dismiss="modal"
                                    aria-label="Close"
                                  ></button>
                                </div>
                                <div class="modal-body">
                                  Are you sure you want to delete this address?
                                </div>
                                <div class="modal-footer">
                                  <button
                                    type="button"
                                    class="btn btn-secondary"
                                    data-bs-dismiss="modal"
                                  >
                                    Cancel
                                  </button>
                                  <button type="submit" class="btn btn-danger">Delete</button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      <% }); %>
                    </ul>


                    <button type="button" id="placeOrderBtn" class="btn btn-outline-primary-2 btn-order btn-block">
                        <span class="btn-text" id="text">Confirm Address</span>
                      </button>

                    
                  </div>

                </form>

                 
                
                
                

                  <!--new address adding section start-->



           
              
              
              <!-- Edit Address Modal -->
              <div 
                class="modal fade" 
                id="editAddressModal" 
                tabindex="-1" 
                aria-labelledby="editAddressLabel" 
                aria-hidden="true"
              >
                <div class="modal-dialog">
                  <div class="modal-content">
                    <form id="editAddressForm">
                      <div class="modal-header">
                        <h5 class="modal-title" id="editAddressLabel">Edit Address</h5>
                        <button 
                          type="button" 
                          class="btn-close" 
                          data-bs-dismiss="modal" 
                          aria-label="Close"
                        ></button>
                      </div>
                      <div class="modal-body">
                        <input type="hidden" id="editAddressId" />
                        <div class="form-group mb-3">
                          <label for="editAddressType">Address Type</label>
                          <input 
                            type="text" 
                            id="editAddressType" 
                            class="form-control" 
                            required
                          />
                        </div>
                        <div class="form-group mb-3">
                          <label for="editName">Name</label>
                          <input 
                            type="text" 
                            id="editName" 
                            class="form-control" 
                            required
                          />
                        </div>
                        <div class="form-group mb-3">
                          <label for="editCity">City</label>
                          <input 
                            type="text" 
                            id="editCity" 
                            class="form-control" 
                            required
                          />
                        </div>
                        <div class="form-group mb-3">
                          <label for="editState">State</label>
                          <input 
                            type="text" 
                            id="editState" 
                            class="form-control" 
                            required
                          />
                        </div>
                        <div class="form-group mb-3">
                          <label for="editPhone">Phone Number</label>
                          <input 
                            type="text" 
                            id="editPhone" 
                            class="form-control" 
                            required
                          />
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button 
                          type="button" 
                          class="btn btn-secondary" 
                          data-bs-dismiss="modal"
                        >
                          Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">Update</button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
              







            <!--new address adding section end-->







  
              
              </div> 
              
              

            <!-- Address Section -->


            

            <!--body-->
              
              
  
            <!-- Payment Section -->
            <div class="panel-heading">
              <h3 class="panel-title">
                
                  Payment Method:
              
              </h3>
            </div>

            


            <form id="paymentForm">
                <div class="payment-method">
                  <div>
                    <label>
                      <input type="radio" name="paymentType" id="COD" value="COD"> Cash on Delivery
                    </label>

                  </div>
                  <div>
                  <label>
                    <input type="radio" name="paymentType" id="Wallet" value="Wallet"> Wallet
                  </label>
                  </div>
                  <div>
                  <label>
                    <input type="radio" name="paymentType" id="Razorpay" value="Razorpay"> Razorpay
                  </label>
                  </div>
                </div>
                <button type="button" id="submitPayment" class="btn btn-outline-primary-2 btn-order btn-block">
                  Place Order
                </button>
            </form>





              
              


            
              

            

          </div>
          <!-- End Summary -->
        </aside>
      </div>
    </div>
  </main>
  


  

  
  <script>
   document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('form').forEach(function (form) {
      form.addEventListener('submit', function (event) {
        console.log('Validating form submission...');
        if (!validateModalForm(this)) {
          console.log('Validation failed. Preventing form submission.');
          event.preventDefault();
        }
      });
    });
  });
  
  function validateModalForm(form) {
    let isValid = true;
    const fieldsToValidate = [
      { id: 'addressType', name: 'Address Type', pattern: /.+/, error: 'Address Type is required.' },
      { id: 'name', name: 'Name', pattern: /^[A-Za-z\s]+$/, error: 'Name should contain alphabets only.' },
      { id: 'city', name: 'City', pattern: /^[A-Za-z\s]+$/, error: 'City should contain alphabets only.' },
      { id: 'landMark', name: 'Landmark', pattern: /^[A-Za-z\s]+$/, error: 'Landmark should contain alphabets only.' },
      { id: 'state', name: 'State', pattern: /^[A-Za-z\s]+$/, error: 'State should contain alphabets only.' },
      { id: 'pinCode', name: 'Pincode', pattern: /^\d{6}$/, error: 'Pincode should be a 6-digit number.' },
      { id: 'phoneNumber', name: 'Phone Number', pattern: /^\d{10}$/, error: 'Phone number should be a 10-digit number.' },
      { id: 'altPhone', name: 'Alternate Phone', pattern: /^\d{10}$/, error: 'Alternate phone number should be a 10-digit number.' },
    ];
  
    form.querySelectorAll('.text-danger').forEach((el) => el.remove()); // Clear previous errors
  
    fieldsToValidate.forEach((field) => {
      const input = form.querySelector(`[name="${field.id}"]`);
      if (!input) {
        console.log(`Field "${field.name}" not found in the form.`);
        return;
      }
  
      const inputValue = input.value.trim();
      console.log(`Validating "${field.name}":`, inputValue);
  
      if (!field.pattern.test(inputValue)) {
        console.log(`Validation error: ${field.error}`);
        displayError(input, field.error);
        isValid = false;
      }
    });
  
    const phone = form.querySelector('[name="phoneNumber"]');
    const altPhone = form.querySelector('[name="altPhone"]');
    if (phone && altPhone && phone.value.trim() === altPhone.value.trim()) {
      const errorMessage = 'Phone number and alternate phone number should be different.';
      console.log(errorMessage);
      displayError(phone, errorMessage);
      displayError(altPhone, errorMessage);
      isValid = false;
    }
  
    return isValid;
  }
  
  function displayError(input, message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'text-danger';
    errorDiv.textContent = message;
    input.parentNode.appendChild(errorDiv);
  }



  

</script>


 

  
  <script>
    // Function to get query parameters
    function getQueryParam(param) {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get(param);
    }
  
    // Check if the 'success' parameter exists
    if (getQueryParam('success') === 'true') {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Address updated successfully!',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'OK',
      }).then(() => {
        // Remove the query parameter from the URL after showing the alert
        const url = new URL(window.location);
        url.searchParams.delete('success');
        window.history.replaceState({}, document.title, url);
      });
    }
  </script>


<script>
    // Function to get query parameters
    function getQueryParam(param) {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get(param);
    }
  
    // Check if the 'success' parameter exists
    if (getQueryParam('isDeleted') === 'true') {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: 'Address deleted successfully!',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'OK',
      }).then(() => {
        // Remove the query parameter from the URL after showing the alert
        const url = new URL(window.location);
        url.searchParams.delete('isDeleted');
        window.history.replaceState({}, document.title, url);
      });
    }
  </script>



<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  //Store the total amount in a JavaScript variable
  const totalAmount = Number('<%- finalAmount %>') || 0;
</script>

<script>

//----------------------------------------------------------------------------------FOR payment--------------





document.getElementById('submitPayment').addEventListener('click', async (e) => {
    e.preventDefault(); // Prevent the default form submission

    const paymentType = document.querySelector('input[name="paymentType"]:checked')?.value;

    const walletBalance = Number('<%= walletBalance %>');

    const totalAmount = Number('<%- finalAmount %>') || 0;
    
    if (!paymentType) {
        Swal.fire({
            icon: 'warning',
            title: 'No Payment Method Selected',
            text: 'Please select a payment method to proceed.',
        });
        return;
    }


    

    if (paymentType === "COD") {
        try {
            const response = await fetch('/selectPaymentType', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentType }),
            });

            const result = await response.json();

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Payment Method Selected',
                    text: result.message,
                    confirmButtonText: 'Continue',
                }).then(() => {
                    window.location.href = '/orderSuccess';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message,
                });
            }
        } catch (error) {
            console.error('Error selecting payment type:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops!',
                text: 'An error occurred while placing the order.',
            });
        }
    } else if (paymentType === "Razorpay") {
                        try {



                          // Calculate amount in paise
          console.log("totalAmount",totalAmount);
          
          const amountInPaise = Math.round(totalAmount * 100);
          console.log('Amount in paise:', amountInPaise); // Debug log

                          

                            // Create Razorpay order
                            const response = await fetch('/create-razorpay-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ amount: amountInPaise }) // Add amount in request body
                            });

                            const result = await response.json();

                            console.log("Create Razorpay order response:", result);

                            if (!result.success) {
                                throw new Error(result.error);
                            }

                            

                            // Configure Razorpay
                            const options = {
                                key: result.key,
                                amount: result.order.amount,
                                //amount : amountInPaise,
                                
                                currency: 'INR',
                                name: 'ElectroMart',
                                description: 'Purchase Payment',
                                order_id: result.order.id,

                                
                                
                          
                handler: async function (response) {
                  //console.log("Before try...",options);
                 // console.log("Payment successful, verifying...", response); // Debug log
                    try {
                      //console.log("Inside handler ....");
                      
                        const verifyResponse = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature
                            })
                        });

                        const verifyResult = await verifyResponse.json();

                        if (verifyResult.success) {
                            // Redirect directly to the order success page with order details
                            window.location.href = '/orderSuccess';
                        } else {
                            throw new Error(verifyResult.message || 'Payment verification failed');
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: error.message
                        });
                    }
                },



                prefill: {
                    name: '<%= user.name %>',
                    email: '<%= user.email %>'
                },
                theme: {
                    color: '#3399cc'
                }
            };
            //console.log("Initializing Razorpay with options:", options); // Debug log

            const rzp = new Razorpay(options);
            rzp.open();
        } catch (error) {
          console.log("options in  ejs",options);
          
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message
            });
        }
    } 
    else if (paymentType === 'Wallet') {
        
          // Check if the wallet balance is sufficient
          if (walletBalance < totalAmount) {
            return Swal.fire({
              icon: "error",
              title: "Insufficient Balance",
              text: "You do not have enough balance in your wallet to complete this transaction."
            });
          
        }
        window.location.href = '/checkout/processPayment';
      }
});







//-----------------------------------------------------------------------------------for address

document.getElementById('placeOrderBtn').addEventListener('click', async () => {
  // Get the selected address
  const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');

  if (!selectedAddress) {
    // SweetAlert error if no address is selected
    return Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Please select an address for your order.',
      confirmButtonText: 'OK',
    });
  }

  // Proceed with submitting the address to the backend
  const addressId = selectedAddress.value;

  try {
    const response = await fetch('/confirm-address', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ selectedAddress: addressId }),
    });

    const result = await response.json();

    if (response.ok) {
      // SweetAlert success if the address is confirmed
      await Swal.fire({
        icon: 'success',
        title: 'Address Selected',
        text: result.message || 'Your address has been selected successfully!',
        confirmButtonText: 'OK',
      });
    } else {
      // SweetAlert error if the backend fails
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.message || 'Failed to confirm the address. Please try again.',
        confirmButtonText: 'OK',
      });
    }
  } catch (error) {
    console.error('Error confirming address:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while confirming the address. Please try again.',
      confirmButtonText: 'OK',
    });
  }
});




</script>


<!-------------------------------------------------------------------------coupon applying------------------------------------->

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Define a variable to keep track of the applied coupon count
  let appliedCouponCount = 0;

  // Attach a submit event listener to the couponApplyForm element
  document.addEventListener('DOMContentLoaded', function () {
    const couponApplyFormElement = document.getElementById('couponApplyForm');
    couponApplyFormElement.addEventListener('submit', async function (e) {
      e.preventDefault();
      await couponApply();
    });
  });

  // Function to handle coupon form submission
  async function couponApply() {
    if (appliedCouponCount > 0) {
      Swal.fire({
        icon: "warning",
        title: "Coupon Already Applied",
        text: "Only one coupon can be applied at a time.",
      });
      return;
    }

    const couponCode = document.getElementById("appendedInputButton").value.trim(); // Fetch the input value
    if (!couponCode) {
      Swal.fire({
        icon: "error",
        title: "Empty Field",
        text: "Please enter a valid coupon code.",
      });
      return;
    }

    try {
      const response = await fetch("/checkout/applyCoupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name: couponCode }),
      });

      const result = await response.json();

      if (result.success) {
        appliedCouponCount++;

        // Show success message
        Swal.fire({
          icon: "success",
          title: "Coupon Applied!",
          text: "Your coupon has been applied successfully.",
        });

        // Update UI to show coupon details
        document.getElementById("couponAppliedRow").style.display = "table-row";
        document.getElementById("appliedCoupon").innerText = couponCode;

        document.getElementById("discountRow").style.display = "table-row";
        document.getElementById("discountAmount").innerText = "-₹" + result.discountAmount;

        document.getElementById("newTotalRow").style.display = "table-row";
        document.getElementById("grandTotalAfterDiscount").innerText = "₹" + result.grandTotalAfterDiscount;

        //document.getElementById("grandTotal").innerHTML = "₹" + result.grandTotalAfterDiscount;
      } else {
        // Show error messages based on response
        Swal.fire({
          icon: "error",
          title: "Coupon Error",
          text: result.message || "Invalid coupon. Please try again.",
        });

        // Hide coupon rows
        document.getElementById("couponAppliedRow").style.display = "none";
        document.getElementById("discountRow").style.display = "none";
        document.getElementById("newTotalRow").style.display = "none";
      }
    } catch (error) {
      console.error("Error applying coupon:", error);
      Swal.fire({
        icon: "error",
        title: "Server Error",
        text: "Something went wrong. Please try again later.",
      });
    }
  }
</script>

<!------------------------------------------------------------------------------------------------------------------>

<!-------------------------------------------------coupon removing----------------------------------------------->



<!-- <script>
  document.getElementById('removeCouponBtn')?.addEventListener('click', async function () {
    try {
      const response = await fetch('/checkout/removeCoupon', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success) {
        // Show success message
        Swal.fire({
          icon: 'success',
          title: 'Coupon Removed',
          text: 'The coupon has been removed successfully.',
          showConfirmButton: false,
          timer: 1500
        }).then(() => {
          // Reload the page to update the prices
          window.location.reload();
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: result.message || 'Failed to remove coupon'
        });
      }
    } catch (error) {
      console.error('Error removing coupon:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while removing the coupon'
      });
    }
  });
</script> -->
 

<!-------------------------------------------------coupon removing---------------------------------------------->

<%- include("../../views/partials/user/footer") %>

  

